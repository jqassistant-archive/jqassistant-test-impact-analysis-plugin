<jqa:jqassistant-rules xmlns:jqa="http://www.buschmais.com/jqassistant/core/rule/schema/v1.3">

    <concept id="test-impact-analysis:CurrentGitBranch" severity="info">
        <description>Determines the Git current branch and adds a label 'Current'.</description>
        <cypher><![CDATA[
            MATCH
              (repository:Repository)-[:HAS_BRANCH]->(branch:Git:Branch)
            WHERE
              branch.name starts with "heads/"
            MATCH
              (repository)-[:HAS_HEAD]->(head:Git:Commit),
              (branch)-[:HAS_HEAD]->(branchHead:Git:Commit),
               p=shortestPath((branchHead)-[:HAS_PARENT*0..]->(head))
            SET
              branch:Current
            RETURN
              branch.name as CurrentBranch, length(p) as Offset
        ]]></cypher>
    </concept>

    <concept id="test-impact-analysis:TestsAffectedByLastGitCommit" severity="info">
        <requiresConcept refId="test-impact-analysis:CurrentGitBranch" />
        <requiresConcept refId="junit4:TestClass" />
        <description>Adds a label 'Affected' to all test classes having a dependency to Java types which were changed in the last Git commit.</description>
        <cypher><![CDATA[
            MATCH
              (:Branch:Current)-[:HAS_HEAD]->(:Commit)-[:CONTAINS_CHANGE]->()-[:MODIFIES]->(sourceFile:File)
            WHERE
              sourceFile.relativePath ends with ".java"
            SET
              sourceFile:Changed
            WITH
              sourceFile
            MATCH
              (artifact:Artifact)-[:CONTAINS]->(package:Package)-[:CONTAINS]->(type:Type)
            WHERE
              sourceFile.relativePath ends with (package.fileName + "/" + type.sourceFileName)
            SET
              type:Changed
            WITH
              artifact, type
            MATCH
              (testPackage:Package)-[:CONTAINS]->(test:Class),
              (test)-[:EXTENDS|IMPLEMENTS*0..]->(:Test:Class)-[:DEPENDS_ON*0..1]->(abstractType:Type),
              (type:Type)-[:EXTENDS|IMPLEMENTS*0..]->(abstractType)<-[:CONTAINS]-(:Artifact)
            WHERE NOT
              (exists(test.abstract) and test.abstract)
            SET
              test:Affected
            RETURN
              artifact as Artifact, collect(distinct test) as Tests
        ]]></cypher>
    </concept>

    <concept id="test-impact-analysis:SurefireSuiteForLastGitCommit" severity="info">
        <requiresConcept refId="test-impact-analysis:TestsAffectedByLastGitCommit" />
        <description>Reports all test classes affected by the last Git commit.</description>
        <cypher><![CDATA[
            MATCH
              (:Maven:Project)-[:CREATES]->(artifact:Artifact)
            OPTIONAL MATCH
              (artifact)-[:CONTAINS]->(test:Affected:Test)
            RETURN
              artifact as Artifact, collect(test) as Tests
        ]]></cypher>
        <report type="surefire-suite" />
    </concept>

    <concept id="test-impact-analysis:GitBaseCommit">
        <description>Adds a label 'Base' to all commits with more than one child commits (i.e. commits where a branch is split off).</description>
        <cypher><![CDATA[
            MATCH
              (child:Commit)-[p:HAS_PARENT]->(branchBase:Commit)
            WITH
              branchBase, count(child) as children
            WHERE
              children > 1
            SET
              branchBase:Base
            RETURN
              branchBase as Base, children as Children
        ]]></cypher>
    </concept>


    <concept id="test-impact-analysis:ChangeCommitsInCurrentGitBranch" severity="info">
        <requiresConcept refId="test-impact-analysis:CurrentGitBranch" />
        <requiresConcept refId="test-impact-analysis:GitBaseCommit" />
        <requiresParameter name="testImpactAnalysisGitBaseBranch" type="String" defaultValue="heads/master"/>
        <description>Adds a label 'Changed' to source files that changed in the current Git branch which are not included in the base branch.</description>
        <cypher><![CDATA[
            MATCH
              (branch:Branch:Current)-[:HAS_HEAD]->(branchHead:Commit),
              branchHistory=shortestPath((base:Commit:Base)<-[:HAS_PARENT*]-(branchHead))
            WHERE
              branchHead <> base
            WITH
              base, branchHistory
            MATCH
              (baseBranch:Branch)-[:HAS_HEAD]->(baseHead:Commit),
              baseHistory=shortestPath((base)<-[:HAS_PARENT*]-(baseHead))
            WHERE
              baseBranch.name ends with {testImpactAnalysisGitBaseBranch}
              and baseHead <> base
            WITH
              branchHistory
            LIMIT
              1
            UNWIND
              nodes(branchHistory) as commit
            WITH
              commit
            MATCH
              (commit)-[:CONTAINS_CHANGE]->()-[:MODIFIES]->(sourceFile:File)
            SET
              sourceFile:Changed
            RETURN
              commit.sha, collect(sourceFile.relativePath)
        ]]></cypher>
    </concept>

    <concept id="test-impact-analysis:TestsAffectedByCurrentGitBranch" severity="info">
        <requiresConcept refId="test-impact-analysis:ChangeCommitsInCurrentGitBranch" />
        <requiresConcept refId="junit4:TestClass" />
        <description>Adds a label 'Affected' to all test classes having a dependency to Java types which were changed by commits in the current Git branch.</description>
        <cypher><![CDATA[
            MATCH
              (sourceFile:File:Changed)
            WHERE
              sourceFile.relativePath ends with ".java"
            WITH
              sourceFile
            MATCH
              (artifact:Artifact)-[:CONTAINS]->(package:Package)-[:CONTAINS]->(type:Type)
            WHERE
              sourceFile.relativePath ends with (package.fileName + "/" + type.sourceFileName)
            SET
              type:Changed
            WITH
              artifact, type
            MATCH
              (testPackage:Package)-[:CONTAINS]->(test:Class),
              (test)-[:EXTENDS|IMPLEMENTS*0..]->(:Test:Class)-[:DEPENDS_ON*0..1]->(abstractType:Type),
              (type:Type)-[:EXTENDS|IMPLEMENTS*0..]->(abstractType)<-[:CONTAINS]-(:Artifact)
            WHERE NOT
              (exists(test.abstract) and test.abstract)
            SET
              test:Affected
            RETURN
              artifact as Artifact, collect(distinct test) as Tests
        ]]></cypher>
    </concept>

    <concept id="test-impact-analysis:SurefireSuiteForCurrentBranch" severity="info">
        <requiresConcept refId="test-impact-analysis:TestsAffectedByCurrentGitBranch" />
        <description>Reports all test classes affected by commits in the current Git branch.</description>
        <cypher><![CDATA[
            MATCH
              (:Maven:Project)-[:CREATES]->(artifact:Artifact)
            OPTIONAL MATCH
              (artifact)-[:CONTAINS]->(test:Affected:Test)
            RETURN
              artifact as Artifact, collect(test) as Tests
        ]]></cypher>
        <report type="surefire-suite" />
    </concept>
</jqa:jqassistant-rules>
